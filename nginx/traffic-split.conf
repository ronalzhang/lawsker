# 流量分割NGINX配置
# 用于灰度发布的流量控制

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format canary '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for" '
                     '$request_time $upstream_response_time '
                     'backend="$upstream_addr" canary="$canary_flag"';

    access_log /var/log/nginx/access.log canary;

    # 基础配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    # 定义变量用于流量分割
    map $request_id $canary_flag {
        default "old";
        ~^.{0,1}$ "new";  # 10%流量到新版本
    }

    # 根据用户类型进行流量分割
    map $http_user_type $user_canary_flag {
        default $canary_flag;
        "admin" "new";      # 管理员用户全部使用新版本
        "tester" "new";     # 测试用户全部使用新版本
        "beta_user" "new";  # Beta用户使用新版本
    }

    # 根据Cookie进行流量分割
    map $cookie_canary_user $cookie_canary_flag {
        default $user_canary_flag;
        "true" "new";
        "false" "old";
    }

    # 最终的流量分割决策
    map $cookie_canary_flag $final_backend {
        default "backend_old";
        "new" "backend_new";
    }

    # 上游服务器配置
    upstream backend_old {
        server backend:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream backend_new {
        server backend-new:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # 健康检查配置
    upstream backend_health {
        server backend:8000;
        server backend-new:8000 backup;
    }

    # 限流配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=canary:10m rate=5r/s;

    # 主服务器配置
    server {
        listen 80;
        server_name _;

        # 健康检查端点
        location /health {
            access_log off;
            proxy_pass http://backend_health/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 灰度发布控制端点
        location /canary/status {
            access_log off;
            return 200 '{"canary_percentage": "${CANARY_PERCENTAGE}", "backend": "$final_backend", "canary_flag": "$cookie_canary_flag"}';
            add_header Content-Type application/json;
        }

        # 设置灰度发布Cookie
        location /canary/enable {
            add_header Set-Cookie "canary_user=true; Path=/; Max-Age=86400";
            return 302 /;
        }

        location /canary/disable {
            add_header Set-Cookie "canary_user=false; Path=/; Max-Age=86400";
            return 302 /;
        }

        # API代理
        location /api/ {
            # 限流
            limit_req zone=api burst=20 nodelay;
            
            # 添加灰度发布标识头
            proxy_set_header X-Canary-Flag $cookie_canary_flag;
            proxy_set_header X-Canary-Version "${VERSION:-canary}";
            
            # 根据流量分割决策选择后端
            proxy_pass http://$final_backend;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }

        # WebSocket代理
        location /ws/ {
            proxy_pass http://$final_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Canary-Flag $cookie_canary_flag;
            proxy_read_timeout 86400;
        }

        # 静态文件
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # 添加灰度发布标识
            add_header X-Canary-Flag $cookie_canary_flag;
            add_header X-Canary-Version "${VERSION:-canary}";
        }

        # 监控端点
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.0.0.0/8;
            deny all;
        }
    }

    # 灰度发布监控服务器
    server {
        listen 8080;
        server_name _;

        location /metrics {
            access_log off;
            
            # 返回Prometheus格式的指标
            content_by_lua_block {
                local canary_requests = ngx.shared.canary_requests or 0
                local total_requests = ngx.shared.total_requests or 0
                local canary_percentage = canary_requests / total_requests * 100
                
                ngx.say("# HELP nginx_canary_requests_total Total canary requests")
                ngx.say("# TYPE nginx_canary_requests_total counter")
                ngx.say("nginx_canary_requests_total " .. canary_requests)
                
                ngx.say("# HELP nginx_canary_percentage Current canary percentage")
                ngx.say("# TYPE nginx_canary_percentage gauge")
                ngx.say("nginx_canary_percentage " .. canary_percentage)
            }
        }

        location /canary/config {
            access_log off;
            return 200 '{"canary_percentage": "${CANARY_PERCENTAGE}", "version": "${VERSION}", "strategy": "traffic_split"}';
            add_header Content-Type application/json;
        }
    }
}